{
  "openapi": "3.0.1",
  "info": {
    "title": "Compassolisa",
    "description": "This API refers to a luxury and semi luxury car rental system",
    "version": "1.0.0",
    "contact": {
      "email": "matheusnunesz1337@gmail.com"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000/",
      "description": "API de teste"
    }
  ],
  "paths": {
    "/api/v1/people": {
      "get": {
        "summary": "Get all people",
        "parameters": [
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer"
            },
            "description": "The number of people to skip before starting to collect the result set",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "description": "The numbers of people to return",
            "required": false
          },
          {
            "in": "query",
            "name": "nome",
            "schema": {
              "type": "string"
            },
            "description": "person's name"
          },
          {
            "in": "query",
            "name": "cpf",
            "schema": {
              "type": "string"
            },
            "description": "person's cpf"
          },
          {
            "in": "query",
            "name": "data_nascimento",
            "schema": {
              "type": "string"
            },
            "description": "person's day of birthday"
          },
          {
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            },
            "description": "person's email"
          },
          {
            "in": "query",
            "name": "habilitado",
            "schema": {
              "type": "string"
            },
            "description": "person's status"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/People"
                }
              }
            }
          },
          "400": {
            "description": "Invalid filter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new person",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Person"
              }
            }
          }
        },
        "description": "At this endpoint, you can create a new person",
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              }
            }
          },
          "400": {
            "description": "Error status 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/people/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "summary": "Get people by Id",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              }
            }
          },
          "204": {
            "description": "Any person were found"
          },
          "400": {
            "description": "Error status 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a person",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Person"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              }
            }
          },
          "404": {
            "description": "Person not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "400": {
            "description": "Error status 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a person",
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "Person not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "400": {
            "description": "Invalid id format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/car": {
      "get": {
        "summary": "Get all cars",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer"
            },
            "description": "The number of cars to skip before starting to collect the result set",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "description": "The numbers of cars to return",
            "required": false
          },
          {
            "in": "query",
            "name": "modelo",
            "schema": {
              "type": "string"
            },
            "description": "car model"
          },
          {
            "in": "query",
            "name": "cor",
            "schema": {
              "type": "string"
            },
            "description": "color of car"
          },
          {
            "in": "query",
            "name": "ano",
            "schema": {
              "type": "string"
            },
            "description": "year"
          },
          {
            "in": "query",
            "name": "descricao",
            "schema": {
              "type": "string"
            },
              "description": "accessory description"
          },
          {
            "in": "query",
            "name": "quantidadePassageiros",
            "schema": {
              "type": "number"
            },
            "description": "number of passengers"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cars"
                }
              }
            }
          },
          "400": {
            "description": "Error status 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "401": {
            "description": "Error status 401 - Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new car",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Car"
              }
            }
          }
        },
        "description": "At this endpoint, you can create a new car",
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Car"
                }
              }
            }
          },
          "400": {
            "description": "Error status 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "401": {
            "description": "Error status 401 - Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/car/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "get": {
        "summary": "Get car by Id",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Car"
                }
              }
            }
          },
          "204": {
            "description": "Any car were found"
          },
          "404": {
            "description": "Car not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "400": {
            "description": "Error status 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "401": {
            "description": "Error status 401 - Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        }
      }, 
      "put": {
        "summary": "Update a car",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Car"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              }
            }
          },
          "404": {
            "description": "Car not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "400": {
            "description": "Error status 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "401": {
            "description": "Error status 401 - Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a car",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "Car not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "400": {
            "description": "Error status 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          },
          "401": {
            "description": "Error status 401 - Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/rental": {
      "get": {
        "summary": "Get all rentals",
        "parameters": [
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer"
            },
            "description": "The number of rentals to skip before starting to collect the result set",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "description": "The numbers of rentals to return",
            "required": false
          },
          {
            "in": "query",
            "name": "nome",
            "schema": {
              "type": "string"
            },
            "description": "rental name"
          },
          {
            "in": "query",
            "name": "cnpj",
            "schema": {
              "type": "string"
            },
            "description": "rental cnpj"
          },
          {
            "in": "query",
            "name": "atividades",
            "schema": {
              "type": "string"
            },
            "description": "rental activities"
          },
          {
            "in": "query",
            "name": "cep",
            "schema": {
              "type": "string"
            },
            "description": "rental cep"
          },
          {
            "in": "query",
            "name": "number",
            "schema": {
              "type": "number"
            },
            "description": "rental number"
          },
          {
            "in": "query",
            "name": "complemento",
            "schema": {
              "type": "string"
            },
            "description": "rental complement"
          },
          {
            "in": "query",
            "name": "logradouro",
            "schema": {
              "type": "string"
            },
            "description": "public place"
          },
          {
            "in": "query",
            "name": "bairro",
            "schema": {
              "type": "string"
            },
            "description": "rental district"
          },
          {
            "in": "query",
            "name": "localidade",
            "schema": {
              "type": "string"
            },
            "description": "rental city"
          },
          {
            "in": "query",
            "name": "uf",
            "schema": {
              "type": "string"
            },
            "description": "rental state"
          },
          {
            "in": "query",
            "name": "isFilial",
            "schema": {
              "type": "string"
            },
            "description": "rental type"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rentals"
                }
              }
            }
          },
          "400": {
            "description": "Invalid filter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new rental",
        "description": "at this endpoint you can create a new rental",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Rental"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RentalReturn"
                }
              }
            }
          },
          "400": {
            "description": "Error status 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/authenticate": {
      "post": {
        "summary": "Authenticate a person",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "senha": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "description": "At this endpoint, you can authenticate",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Error status 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Errors"
                }
              }
            }
          } 
        }
      }
    }        
  },  
  "components": {
    "schemas": {
      "Person": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "nome": {
            "type": "string"
          },
          "cpf": {
            "type": "string"
          },
          "data_nascimento": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "senha": {
            "type": "string"
          },
          "habilitado": {
            "type": "string",
            "enum": [
              "sim",
              "não"
            ]
          }
        }
      },
      "People": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Person"
        }
      },
      "Car": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "modelo": {
            "type": "string"
          },
          "cor": {
            "type": "string"
          },
          "ano": {
            "type": "number"
          },
          "acessorios": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "descricao": {
                  "type": "string"
                }
              }
            }  
          },
          "quantidadePassageiros": {
            "type": "number"
          }
        }
      },
      "Cars": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Car"
        }
      },
      "Rental": {
        "type": "object",
        "properties": {
          "nome": {
            "type": "string"
          },
          "cnpj": {
            "type": "string"
          },
          "atividades": {
            "type": "string"
          },
          "endereco": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "cep": {
                  "type": "string"
                },
                "complemento": {
                  "type": "string"
                },
                "number": {
                  "type": "number"
                },
                "isFilial": {
                  "type": "boolean"
                }
              }
            }  
          }
        }
      },
      "RentalReturn": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "nome": {
            "type": "string"
          },
          "cnpj": {
            "type": "string"
          },
          "atividades": {
            "type": "string"
          },
          "endereco": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "cep": {
                  "type": "string"
                },
                "logradouro": {
                  "type": "string"
                },
                "complemento": {
                  "type": "string"
                },
                "bairro": {
                  "type": "string"
                },
                "number": {
                  "type": "number"
                },
                "localidade": {
                  "type": "string"
                },
                "uf": {
                  "type": "string"
                }
              }
            }  
          }
        }
      },
      "Rentals": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/RentalReturn"
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },  
      "Errors": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Error"
        }
      }  
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}